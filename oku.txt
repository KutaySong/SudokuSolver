-----------------------------------------------------------
-----------------------------------------------------------
    NE İŞE YARAR ?
    ---------------
"EnZorSudoku" problemini en hızlı biçimde çözer

    YÖNTEM
    --------
Çözebildiği kadarını eliminasyon()
Çözemediğini  atmasyon() ile lakin
SDFS (Standart Depth First Search)
ile değil de Daha Dinamik bir Yöntemle*

Ekranın soluna klasik SDFS ile
Sağına KFS ile (Kutay First Search)
-----------------------------------------------------------
-----------------------------------------------------------

    VERSİYONLAR



    31  yazdım ama bu da olmadı, demek ki DFS'te dynamic yok
    30  önce dynamic programming ve falsolar
    29  düzgün çalışmadı baştan implement edicem

    28  ebeveynin tahmini tükenince patlasın dedimdi
    27  tahminler ve patlama işlemi eklendi
    26  KenOlasıBul yazıldı
    25  2x2 de çalıştırdım
    24  2x2 de KFS çalıştırılacak, ortam hazırlandı
    23  KFS için uğraştım ama çalıştıramadım.
    22  Kutu ihtimalini ekledim
    21  Yatay ve Dikey tek ihtimal kalmasını ekledim
    20  KenOlasıBul'a yığıt check eklendi çalışmadı
    19  sonsuz RAM tüketimi sıçalama-I
    18  zürriyetini sil eklendi
    17  yinelemelileri bitirdim. kontrol edicem.
    16  havuzdan çıkarmada bir mantık hatası keşfettim*
    15  birşeyler yazdım, okuyacağım
    14  itme yazıldı çekmeyi yazıcam
    13  yığıtı nesne-dizgesi yaptım
    12  çözüm havuzdan canlı-yığıt mantığına geçtim
    11  yarıştırıyorum
    10  çiftledim

-----------------------------------------------------------
-----------------------------------------------------------

    DETAYLI

25: Sıkıntı şu: En uygun karenin iki ihtimali olsun, sonra bu iki
ihtimalden de dallar çıktı ve başarısız oldu diyelim. Diğer kareye
geçti, orada 3 olasılık var, ve ilkinden devam etti. Şimdi ilk 
karenin havuzdaki ihtimalleri komple çıkarılmıştı. Peki bu durumda
yeni ihtimal er geç sıçmaz mı !!

Çözüm: 


-----------------------------------------------------------
24: zannederim bozuk sudoku hatası vermesinin sebebi 
anadaki branşların hepsi çakıp da diğer kareye geçeceği
zaman annedeki silimi yapamaması. Bunun için yineli bir
silme yazma gerekli
-----------------------------------------------------------
16:  Branş mevzuu karışık. DFS'ten şu mantıkla çözüyordum:
yol ayrımında ilk yolu seçiyor, bu yolu havuzdan çıkararak
yığıta ekliyordum. yol bozuksa ve geri dönersem, yığıttan 
çektiğim havuzda bu ihtimal olmadığı için onu atlayarak devam
ediyor eliminasyon aşamasına geçiyordum.

    Bu kez durum şöyle farklı: Diyelim ki ilk katmanda bir 
çakılma oldu. bu ne demek, o kareye o rakam asla gelemez demek.
diğer havuzlar henüz bundan habersiz olduğu için, onların 
olasılık havuzlarında bu ihtimal hala var demek. Veya ihtimali
havuzdan çıkararak klonladım diyelim, yukarıdaki örnekteki gibi
Bu da KESİNLİKLE doğru olmaz. Çünkü o ihtimali kullanarak diğer
dallar sonuca daha hızlı ulaşabilir.

    Demek ki, ne yapmak lazım?= Bir kere ihtimali havuzdan çıkarmamak
lazım klonlarken. Lakin anadan ikinci kardeşi doğururken de aynı
olasılığı hesaplatma çıkmazına düşmeden ! Bu nasıl olacak ??

    Yığıta [i*kaçlı+y][n] şeklinde mi kaydetsem ?

    Bu baya kritik bir mevzu A dallanmasında 81-4'ü branşa olarak ayırdım.
Sonradan bu ihtimali hesaplamaktan vazgeçtim ve 26-6'yı denemek istedim.
26-6'yı araştırırken hala 81-4'ü saklı tutmalıyım. Belki önce 26-6 ardından
81-4 denemek çözüme daha hızlı ulaştırabilecektir !

    Ancak eğer 81-4'ün çakıldığından eminsem, 26-6'nın havuzundan bu ihtimali
atmalı veya çözümünde yer alıyorsa 26-6'yı komple yok etmeliyim.

----------------------------------------------------------
    Recursive'e çakıldım. Şöyle oluyor. Eğer bir olasılık çakarsa
-1 dönüyor. bu durumda bir kere bunun anasına gidip, çatal sayısını
bir azaltmak ve kutay değerini güncellemek gerekiyor. Sadece anasını
güncellemek yetmiyor. Aynı anaya bağlı kardeşlerin de kutay değerleri
oynuyor. Hadi buraya kadar yazdım. Sonra diyelim ki annenin çatal sayısı
azalıp teke indi. Bunu tüm çözümlere işaretlemek gerekiyor. Ve uygulanan
çözümler de yine teke inebilir. Dolayısı ile YineliEliminasyon'da 
yaptığımı tekrar kodlarken buldum kendimi ve kayboldum. Bunu düzeltmeliyim

-----------------------------------------------------------
    Şu şekilde olmasını kararlaştırdım. Mantıksal eliminasyon
bittiğinde ve bir tercihle karşı karşıya geldiğinde, tüm boş
karelerin dallanma sayısını sonuca olan uzaklıkla çarparak 
bir dizgeye yazacak. [olasılar] (Bunu tersten yapacağım) Sonra bu dizgeyi 
sıralayıp en düşük ihtimalden başlayacak, bir değer seçip 
çözüme devam edecek. Çözümleme yine tıkandığında çözümü ve havuzu
yığıta ekleyecek, yığıt numarasını da bu dala kaydedecek.

olasılar: [[i,j,n],a]   a= uzaklık x dallanma    b= ID  ]

şimdi burda esas soru, bir daldaki hesap bırakılıp diğerine 
geçildiğinde hafızaya yüklenmesi ve geri çağırılması nasıl olacak ?

bir diğer soru da tüm paralel dallar hesaplanmadan direk düşük a'ya
geçilebilir mi? Sanki böylesi çok daha mantıklı


Direk yığıttan çalışmak mantıklı mı?
-----------------------------------
çöz ve havuz diye iki dizge oluşturmuştum. Şimdi bunlar yerine direk
yığıt[0][0] ve yığıt[0][1] mi vereyim diye düşünüyorum.

yığıt[n]: [çözüm, havuz, null, ]
-------------------------------------
sudoku çakar da -1 alırsa, o yığıt kaydının anasının çatalı düşürülerek
kutay değeri yeniden hesaplanacak. ayrıca bu anaya bağlı diğer kardeşlerin
de kutay değeri yeniden hesaplanacak.

sonra bu satır silinecek ?? nasıl silinecek


-----------------------------------------------------------
-----------------------------------------------------------